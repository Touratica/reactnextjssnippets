{
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react';"],
    "description": "Import React - if you must."
  },
  "Import { Component }": {
    "prefix": "imrc",
    "body": ["import { Component } from 'react';"],
    "description": "Import { Component }"
  },
  "Import { useState }": {
    "prefix": "imst",
    "body": ["import { useState } from 'react';"],
    "description": "React 16.8+ useState import"
  },
  "React useState": {
    "prefix": "ust",
    "body": "const [state, setState] = useState(${1:INITIAL_VALUE});",
    "description": "React 16.8+ useState"
  },
  "Import { useEffect }": {
    "prefix": "imeff",
    "body": ["import { useEffect } from 'react';"],
    "description": "React 16.8+ useEffect import"
  },
  "Use useEffect": {
    "prefix": "uueff",
    "body": ["useEffect(() => {$1}, [$0]);"],
    "description": "useEffect snippet with empty second argument"
  },
  "Import { useContext }": {
    "prefix": "imctx",
    "body": ["import { useContext } from 'react';"],
    "description": "React 16.8+ useContext import"
  },
  "React useContext": {
    "prefix": "uctx",
    "body": "const $0 = useContext(${1:CONTEXT_OBJECT});",
    "description": "React 16.8+ useContext"
  },
  "Import { useMemo }": {
    "prefix": "immem",
    "body": ["import { useMemo } from 'react';"],
    "description": "React 16.8+ useMemo import"
  },
  "Import { useRef }": {
    "prefix": "imref",
    "body": ["import { useRef } from 'react';"],
    "description": "React 16.8+ useRef import"
  },
  "Import { useImperativeHandle }": {
    "prefix": "imimphan",
    "body": ["import { useImperativeHandle } from 'react';"],
    "description": "React 16.8+ useImperativeHandle import"
  },
  "Import { useLayoutEffect }": {
    "prefix": "imlayeff",
    "body": ["import { useLayoutEffect } from 'react';"],
    "description": "React 16.8+ useLayoutEffect import"
  },
  "Import { useDebugValue }": {
    "prefix": "imdebval",
    "body": ["import { useDebugValue } from 'react';"],
    "description": "React 16.8+ useDebugValue import"
  },
  "Import PropTypes": {
    "prefix": "imt",
    "body": ["import PropTypes from 'prop-types';"],
    "description": "Import PropTypes"
  },
  "Class Component": {
    "prefix": "cc",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstate = { $2 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Class Component"
  },
  "Class Component With Constructor": {
    "prefix": "ccc",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = { $2 }",
      "\t}",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Class Component With Constructor"
  },
  "Functional Component": {
    "prefix": "fc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn ( $0 );",
      "}"
    ],
    "description": "Functional Component"
  },
  "Functional Component Export": {
    "prefix": "fce",
    "body": [
      "export const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn ( $0 );",
      "}"
    ],
    "description": "Functional Component as named export"
  },
  "Functional Component Default Export": {
    "prefix": "fcde",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Functional Component with default export"
  },
  "Functional Component with useState hook": {
    "prefix": "fcst",
    "body": [
      "import { useState } from 'react';",
      " ",
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "const [value, setValue] = useState(${1:INITIAL_VALUE});",
      " ",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Functional Component with useState hook"
  },
  "import Next.js Head": {
    "prefix": "imhd",
    "body": "import Head from 'next/head';",
    "description": "Next.js Head import"
  },
  "import Next.js GetStaticProps type": {
    "prefix": "imgsp",
    "body": "import { GetStaticProps } from 'next';",
    "description": "Next.js GetStaticProps type import"
  },
  "import Next.js InferGetStaticPropsType": {
    "prefix": "iminfgsp",
    "body": "import { InferGetStaticPropsType } from 'next'",
    "description": "Next.js InferGetStaticPropsType import"
  },
  "use Next.js InferGetStaticPropsType": {
    "prefix": "ninfgsp",
    "body": [
      "function ${1:${TM_FILENAME_BASE}}({ posts }: InferGetStaticPropsType<typeof getStaticProps>) {",
      "\treturn $2",
      "}"
    ],
    "description": "use InferGetStaticPropsType snippet"
  },
  "Next.js Get initial props outside Component": {
    "prefix": "gip",
    "body": [
      "${1:${TM_FILENAME_BASE}}.getInitialProps = async ({ req }) => {",
      "\treturn $2",
      "}"
    ],
    "description": "Next.js Get initial props outside Component"
  },
  "Next.js getInitialProps() inside Class Component": {
    "prefix": "ccgip",
    "body": ["static async getInitialProps() {", "\treturn { $1 };", "}"],
    "description": "Next.js static async getInitialProps() inside Class Component"
  },
  "Next.js getStaticProps() export": {
    "prefix": "gsp",
    "body": [
      "export const getStaticProps: GetStaticProps = async (context) => {",
      "\treturn {",
      "\t\tprops: {$1}",
      "\t};",
      "}"
    ],
    "description": "Next.js getStaticProps() export"
  },
  "Next.js getStaticPaths() export": {
    "prefix": "gspaths",
    "body": [
      "export const getStaticPaths: GetStaticPaths = async () => {",
      "\treturn {",
      "\t\tpaths: [",
      "\t\t\t{ params: { $1 }}",
      "\t\t],",
      "\t\tfallback: $2",
      "\t};",
      "}"
    ],
    "description": "Next.js pre-renders all the static paths https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"
  },
  "import Next.js GetStaticPaths type": {
    "prefix": "imgspaths",
    "body": "import { GetStaticPaths } from 'next'",
    "description": "Next.js GetStaticPaths type import"
  },
  "Next.js getServerSideProps() export": {
    "prefix": "gssp",
    "body": [
      "export const getServerSideProps: GetServerSideProps = async (context) => {",
      "\treturn {",
      "\t\tprops: {$1}",
      "\t};",
      "}"
    ],
    "description": "Next.js getServerSideProps() export https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"
  },
  "import Next.js GetServerSideProps type": {
    "prefix": "imgvsp",
    "body": "import { GetServerSideProps } from 'next'",
    "description": "Next.js GetServerSideProps type import"
  },
  "import Next.js InferGetServerSidePropsType": {
    "prefix": "iminfgvsp",
    "body": "import { InferGetServerSidePropsType } from 'next'",
    "description": "Next.js InferGetServerSidePropsType import"
  },
  "use Next.js InferGetServerSidePropsType": {
    "prefix": "ninfgvsp",
    "body": [
      "function ${1:${TM_FILENAME_BASE}}({ data }: InferGetServerSidePropsType<typeof getServerSideProps>) {",
      "\treturn $2",
      "}"
    ],
    "description": "use InferGetServerSidePropsType snippet"
  },
  "Next.js getInitialProps() expose query": {
    "prefix": "ccgipaq",
    "body": [
      "static async getInitialProps({ Component, ctx }) {",
      "  let pageProps = {};",
      "  if (Component.getInitialProps) {",
      "    pageProps = await Component.getInitialProps(ctx);",
      "  }",
      "",
      "  pageProps.query = ctx.query;",
      "  pageProps.asPath = ctx.asPath;",
      "",
      "  return { pageProps };",
      "}"
    ],
    "description": "Next.js static async getInitialProps() withApollo() expose query and pageProps"
  },
  "Use Next.js Head": {
    "prefix": "nhd",
    "body": ["<Head>", "\t$1", "</Head>"],
    "description": "Next.js Head Tag"
  },
  "import Next.js Link": {
    "prefix": "imlnk",
    "body": "import Link from 'next/link';",
    "description": "Next.js Link import"
  },
  "Use Next.js Link": {
    "prefix": "nlnk",
    "body": ["<Link href=\"$1\">", "\t<a>", "\t\t$0", "\t</a>", "</Link>"],
    "description": "Next.js Link Tag with <a>"
  },
  "Use Next.js Link With Pathname": {
    "prefix": "nlnkpath",
    "body": [
      "<Link href={{ pathname: \"$1\", query: { queryName: queryValue } }}>",
      "\t<a>",
      "\t\t$0",
      "\t</a>",
      "</Link>"
    ],
    "description": "Next.js Link with Pathname"
  },
  "Use Next.js LinkTagWithDynmicRoute": {
    "prefix": "nlnkdyn",
    "body": [
      "<Link href=\"/[$1]\" as={`/${2:SLUG_NAME}`}>",
      "\t<a>",
      "\t\t$0",
      "\t</a>",
      "</Link>"
    ],
    "description": "Next.js Link Tag with Dynamic Route"
  },
  "importNextRouter": {
    "prefix": "imrtr",
    "body": "import Router from 'next/router';",
    "description": "Next.js Router import"
  },
  "Next.js Router from useRouter": {
    "prefix": "nrtr",
    "body": "const router = useRouter();",
    "description": "Declare Next.js Router from useRouter"
  },
  "Next.js query param from useRouter": {
    "prefix": "nqprtr",
    "body": "const { $1 } = router.query;",
    "description": "Destructure Next.js query param from Router from useRouter"
  },
  "importNextRouterWithRouter": {
    "prefix": "imrtrwr",
    "body": "import Router, { withRouter } from 'next/router';",
    "description": "Next.js Router and { withRouter } import"
  },
  "importNextUseRouter": {
    "prefix": "imusrtr",
    "body": "import { useRouter } from 'next/router';",
    "description": "Next.js { useRouter } import"
  },
  "Import Next Image component": {
    "prefix": "imimg",
    "body": "import Image from 'next/image';",
    "description": "Next.js 10 Image component import"
  },
  "Use sized Next Image component": {
    "prefix": "nimg",
    "body": "<Image alt=\"$1\" src=\"$1\" width=\"$1\" height=\"$1\" />",
    "description": "Use sized Next Image component"
  },
  "Use unsized Next Image component": {
    "prefix": "nuimg",
    "body": "<Image alt=\"$1\" src=\"$1\" unsized=\"$1\" />",
    "description": "Use sized Next Image component"
  }
}
